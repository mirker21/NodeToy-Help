/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.12 ./public/3D_models/handcar_half_top.gltf --keepmaterials --keepmeshes -types 
*/

import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import {NodeToyMaterial} from '@nodetoy/react-nodetoy'
// import {NodeToyMaterial as NodeToyMaterialConstructor} from '@nodetoy/three-nodetoy'
import { data as darkPinkShaderData } from '../../shaders/handcar-top-dark-pink-shader.ts'

type GLTFResult = GLTF & {
  nodes: {
    Following_Handlebars: THREE.Mesh
    Handlebar_Lever: THREE.Mesh
    Leading_Handlebars: THREE.Mesh
    X_Body_1: THREE.Mesh
    X_ArmL: THREE.SkinnedMesh
    X_ArmR: THREE.SkinnedMesh
    X_LegL: THREE.SkinnedMesh
    X_LegR: THREE.SkinnedMesh
    Caution_Body_1: THREE.Mesh
    Caution_Body_Bevel: THREE.Mesh
    Caution_Body_Exclamation_Marks: THREE.Mesh
    Caution_ArmL: THREE.SkinnedMesh
    Caution_ArmR: THREE.SkinnedMesh
    Caution_LegL: THREE.SkinnedMesh
    Caution_LegR: THREE.SkinnedMesh
    Handlebar_Frame: THREE.Mesh
    Handlebar_Axle_Pivot: THREE.Mesh
    Lever: THREE.Bone
    LeverIK: THREE.Bone
    X_Body: THREE.Bone
    X_WristR: THREE.Bone
    X_WristL: THREE.Bone
    X_ElbowIKR: THREE.Bone
    X_ElbowIKL: THREE.Bone
    X_KneeIKR: THREE.Bone
    X_KneeIKL: THREE.Bone
    X_LegIKR: THREE.Bone
    X_LegIKL: THREE.Bone
    Caution_Body: THREE.Bone
    Caution_WristR: THREE.Bone
    Caution_WristL: THREE.Bone
    Caution_ElbowIKR: THREE.Bone
    Caution_ElbowIKL: THREE.Bone
    Caution_KneeIKR: THREE.Bone
    Caution_KneeIKL: THREE.Bone
    Caution_LegIKR: THREE.Bone
    Caution_LegIKL: THREE.Bone
  }
  materials: {
    LightBlue: THREE.MeshPhysicalMaterial
    DarkPink: THREE.MeshStandardMaterial
    Teal: THREE.MeshStandardMaterial
  }
}

type ActionName = 'Handlebars Up Down' | 'X Bobbing' | 'Caution Bobbing'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh'] | JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export default function HandcarTopHalf(props: JSX.IntrinsicElements['group']) {
  const [clicked, setClicked] = useState(false);
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('./public/3D_models/handcar_half_top.gltf') as GLTFResult
  const { actions } = useAnimations<GLTFActions>(animations, group)
  // const darkPink = new NodeToyMaterial({darkPinkShaderData})
  const darkPinkRGB = new THREE.Color("#A80874");
  let uniforms = {
    'fogDensity': { value: 0.45 },
    'fogColor': { value: new THREE.Vector3( 0, 0, 0 ) },
    'texture': { value: "https://static.nodetoy.co/static/texture_library/terrazzo/terrazzo_white/2048/Terrazzo_White_Roughness_2048.jpg" },
    'diffuse': { value: new THREE.Vector3( 0.659, 0.031, 0.027 )},
    'emissive': { value: new THREE.Vector3( 0.659, 0.031, 0.027 )},
  };
  const newMaterial = new THREE.ShaderMaterial({
    fragmentShader: darkPinkShaderData.fragment,
    vertexShader: darkPinkShaderData.vertex,
    transparent: false,
    blendColor: 0xA80874,
    name: 'darkPink',
    uniforms: uniforms
  })

  return (
    <group ref={group} {...props} dispose={null} onClick={() => (setClicked(!clicked), console.log(clicked))}>
      <group name="Scene">
        <group name="Handlebars_Armature" position={[0, 0.816, 0]}>
          <primitive object={nodes.Lever} />
          <primitive object={nodes.LeverIK} />
        </group>
        <group name="X_Armature">
          <primitive object={nodes.X_Body} />
          <primitive object={nodes.X_WristR} />
          <primitive object={nodes.X_WristL} />
          <primitive object={nodes.X_ElbowIKR} />
          <primitive object={nodes.X_ElbowIKL} />
          <primitive object={nodes.X_KneeIKR} />
          <primitive object={nodes.X_KneeIKL} />
          <primitive object={nodes.X_LegIKR} />
          <primitive object={nodes.X_LegIKL} />
          <skinnedMesh name="X_ArmL" geometry={nodes.X_ArmL.geometry} skeleton={nodes.X_ArmL.skeleton}>
            <NodeToyMaterial data={darkPinkShaderData} />
          </skinnedMesh>
          <skinnedMesh name="X_ArmR" geometry={nodes.X_ArmR.geometry} skeleton={nodes.X_ArmR.skeleton}>
            <NodeToyMaterial data={darkPinkShaderData} />
          </skinnedMesh>
          <skinnedMesh name="X_LegL" geometry={nodes.X_LegL.geometry} skeleton={nodes.X_LegL.skeleton}>
            <NodeToyMaterial data={darkPinkShaderData} />
          </skinnedMesh>
          <skinnedMesh name="X_LegR" geometry={nodes.X_LegR.geometry} skeleton={nodes.X_LegR.skeleton}>
            <NodeToyMaterial data={darkPinkShaderData} />
          </skinnedMesh>
        </group>
        <group name="Caution_Armature" position={[0, 0.065, -1.125]}>
          <primitive object={nodes.Caution_Body} />
          <primitive object={nodes.Caution_WristR} />
          <primitive object={nodes.Caution_WristL} />
          <primitive object={nodes.Caution_ElbowIKR} />
          <primitive object={nodes.Caution_ElbowIKL} />
          <primitive object={nodes.Caution_KneeIKR} />
          <primitive object={nodes.Caution_KneeIKL} />
          <primitive object={nodes.Caution_LegIKR} />
          <primitive object={nodes.Caution_LegIKL} />
          <skinnedMesh name="Caution_ArmL" geometry={nodes.Caution_ArmL.geometry} skeleton={nodes.Caution_ArmL.skeleton}>
            <NodeToyMaterial data={darkPinkShaderData} />
          </skinnedMesh>
          <skinnedMesh name="Caution_ArmR" geometry={nodes.Caution_ArmR.geometry} skeleton={nodes.Caution_ArmR.skeleton}>
            <NodeToyMaterial data={darkPinkShaderData} />
          </skinnedMesh>
          <skinnedMesh name="Caution_LegL" geometry={nodes.Caution_LegL.geometry} skeleton={nodes.Caution_LegL.skeleton}>
            <NodeToyMaterial data={darkPinkShaderData} />
          </skinnedMesh>
          <skinnedMesh name="Caution_LegR" geometry={nodes.Caution_LegR.geometry} skeleton={nodes.Caution_LegR.skeleton}>
            <NodeToyMaterial data={darkPinkShaderData} />
          </skinnedMesh>
        </group>
        <mesh name="Handlebar_Frame" castShadow receiveShadow geometry={nodes.Handlebar_Frame.geometry} material={nodes.Handlebar_Frame.material} />
        <mesh name="Handlebar_Axle_Pivot" castShadow receiveShadow geometry={nodes.Handlebar_Axle_Pivot.geometry} material={nodes.Handlebar_Axle_Pivot.material} />
      </group>
    </group>
  )
}

useGLTF.preload('./public/3D_models/handcar_half_top.gltf')
